// <auto-generated />
using System;
using DespesaSimples_API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DespesaSimples_API.Migrations
{
    [DbContext(typeof(DespesaSimplesDbContext))]
    [Migration("20250706140856_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DespesaSimples_API.Entities.Balanco", b =>
                {
                    b.Property<int>("IdBalanco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBalanco"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<decimal>("SaldoFinal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalDespesas")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReceitas")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("IdBalanco");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Balancos");

                    b.HasData(
                        new
                        {
                            IdBalanco = 1,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Mes = 3,
                            SaldoFinal = 100.00m,
                            SaldoInicial = 0.00m,
                            TotalDespesas = 0.00m,
                            TotalReceitas = 100.00m,
                            UsuarioId = "1"
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Cartao", b =>
                {
                    b.Property<int>("IdCartao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCartao"));

                    b.Property<string>("Bandeira")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DiaFechamento")
                        .HasColumnType("int");

                    b.Property<int>("DiaVencimento")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Limite")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("IdCartao");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cartoes");

                    b.HasData(
                        new
                        {
                            IdCartao = 1,
                            Bandeira = "Visa",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiaFechamento = 5,
                            DiaVencimento = 10,
                            IsDeleted = false,
                            Limite = 5000m,
                            Nome = "Cartão de crédito",
                            UsuarioId = "1"
                        },
                        new
                        {
                            IdCartao = 2,
                            Bandeira = "Visa",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiaFechamento = 5,
                            DiaVencimento = 10,
                            IdCategoria = 3,
                            IsDeleted = false,
                            Limite = 5000m,
                            Nome = "Cartão de crédito 2",
                            UsuarioId = "1"
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Dia")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoriaPai")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("IdCategoria");

                    b.HasIndex("IdCategoriaPai");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = 1,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(8634),
                            Dia = 30,
                            IsDeleted = false,
                            Nome = "Mercado",
                            UsuarioId = "1"
                        },
                        new
                        {
                            IdCategoria = 2,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(8889),
                            Dia = 29,
                            IsDeleted = false,
                            Nome = "Eletrodomésticos",
                            UsuarioId = "1"
                        },
                        new
                        {
                            IdCategoria = 3,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(9009),
                            Dia = 28,
                            IdCategoriaPai = 2,
                            IsDeleted = false,
                            Nome = "Tv",
                            UsuarioId = "1"
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Tag", b =>
                {
                    b.Property<int>("IdTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTag"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("IdTag");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            IdTag = 1,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(9583),
                            IsDeleted = false,
                            Nome = "alimentação",
                            UsuarioId = "1"
                        },
                        new
                        {
                            IdTag = 2,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(9693),
                            IsDeleted = false,
                            Nome = "mercado",
                            UsuarioId = "1"
                        },
                        new
                        {
                            IdTag = 3,
                            CreatedAt = new DateTime(2025, 7, 6, 14, 8, 55, 988, DateTimeKind.Utc).AddTicks(9694),
                            IsDeleted = false,
                            Nome = "besteira",
                            UsuarioId = "1"
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Transacao", b =>
                {
                    b.Property<int>("IdTransacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTransacao"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DataTransacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Dia")
                        .HasColumnType("int");

                    b.Property<string>("GrupoParcelasId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("IdCartao")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int?>("IdTransacaoFixa")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<string>("Parcela")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("IdTransacao");

                    b.HasIndex("IdCartao");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdTransacaoFixa");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Transacoes");

                    b.HasData(
                        new
                        {
                            IdTransacao = 1,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra de tomada",
                            Dia = 11,
                            IdCartao = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3.5m
                        },
                        new
                        {
                            IdTransacao = 2,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra mercado",
                            Dia = 12,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Finalizada",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 2.25m
                        },
                        new
                        {
                            IdTransacao = 3,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra mercado",
                            Dia = 13,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Finalizada",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 30.75m
                        },
                        new
                        {
                            IdTransacao = 4,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra mercado Sonda",
                            Dia = 14,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Vencida",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3m
                        },
                        new
                        {
                            IdTransacao = 5,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra tv",
                            Dia = 15,
                            GrupoParcelasId = "1",
                            IdCategoria = 3,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "1/3",
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3m
                        },
                        new
                        {
                            IdTransacao = 6,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra tv",
                            Dia = 16,
                            GrupoParcelasId = "1",
                            IdCategoria = 3,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "2/3",
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3m
                        },
                        new
                        {
                            IdTransacao = 7,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra tv",
                            Dia = 17,
                            GrupoParcelasId = "1",
                            IdCategoria = 3,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "3/3",
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3m
                        },
                        new
                        {
                            IdTransacao = 8,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compra fritadeira",
                            Dia = 18,
                            IdCategoria = 2,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 3m
                        },
                        new
                        {
                            IdTransacao = 9,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Salário",
                            Dia = 10,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "AFinalizar",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 5000.62m
                        },
                        new
                        {
                            IdTransacao = 10,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job mercado",
                            Dia = 10,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Finalizada",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 2.25m
                        },
                        new
                        {
                            IdTransacao = 11,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job mercado 2",
                            Dia = 10,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Finalizada",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3.75m
                        },
                        new
                        {
                            IdTransacao = 12,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job mercado 3",
                            Dia = 10,
                            IdCategoria = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "Vencida",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3.5m
                        },
                        new
                        {
                            IdTransacao = 13,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job tv",
                            Dia = 5,
                            GrupoParcelasId = "2",
                            IdCartao = 2,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "1/3",
                            Status = "AFinalizar",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3.5m
                        },
                        new
                        {
                            IdTransacao = 14,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job tv",
                            Dia = 10,
                            GrupoParcelasId = "2",
                            IdCartao = 2,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "2/3",
                            Status = "AFinalizar",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3.5m
                        },
                        new
                        {
                            IdTransacao = 15,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTransacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job tv",
                            Dia = 15,
                            GrupoParcelasId = "2",
                            IdCartao = 2,
                            IsDeleted = false,
                            Mes = 4,
                            Parcela = "3/3",
                            Status = "AFinalizar",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3000.5m
                        },
                        new
                        {
                            IdTransacao = 16,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Job fritadeira",
                            Dia = 20,
                            IdCategoria = 2,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "AFinalizar",
                            Tipo = 1,
                            UsuarioId = "1",
                            Valor = 3.5m
                        },
                        new
                        {
                            IdTransacao = 17,
                            Ano = 2025,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Aluguel",
                            Dia = 15,
                            IdTransacaoFixa = 1,
                            IsDeleted = false,
                            Mes = 4,
                            Status = "AFinalizar",
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 800m
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.TransacaoFixa", b =>
                {
                    b.Property<int>("IdTransacaoFixa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTransacaoFixa"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataTermino")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("IdCartao")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdTransacaoFixa");

                    b.HasIndex("IdCartao");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TransacoesFixas");

                    b.HasData(
                        new
                        {
                            IdTransacaoFixa = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Aluguel",
                            IsDeleted = false,
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 800m
                        },
                        new
                        {
                            IdTransacaoFixa = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Aluguel 2",
                            IdCartao = 2,
                            IsDeleted = false,
                            Tipo = 0,
                            UsuarioId = "1",
                            Valor = 800m
                        });
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0b66f0c-738e-4edb-893b-233b486a989e",
                            Email = "admin@despesasimples.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nome = "Admin",
                            NormalizedEmail = "ADMIN@DESPESASIMPLES.COM.BR",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCo4XC0oyrh5JMjgkTcNG3tc4JzQuMWPIJOFBKlBHI803DErwTelkRkfMIewwCpLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73ded48e-73d3-4a04-ae57-42746460a5e0",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TagTransacao", b =>
                {
                    b.Property<int>("TagsIdTag")
                        .HasColumnType("int");

                    b.Property<int>("TransacoesIdTransacao")
                        .HasColumnType("int");

                    b.HasKey("TagsIdTag", "TransacoesIdTransacao");

                    b.HasIndex("TransacoesIdTransacao");

                    b.ToTable("TransacaoTags", (string)null);
                });

            modelBuilder.Entity("TagTransacaoFixa", b =>
                {
                    b.Property<int>("TagsIdTag")
                        .HasColumnType("int");

                    b.Property<int>("TransacaoFixaIdTransacaoFixa")
                        .HasColumnType("int");

                    b.HasKey("TagsIdTag", "TransacaoFixaIdTransacaoFixa");

                    b.HasIndex("TransacaoFixaIdTransacaoFixa");

                    b.ToTable("TransacaoFixaTags", (string)null);
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Balanco", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("Balancos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Cartao", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Categoria", "Categoria")
                        .WithMany("Cartoes")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("Cartoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Categoria", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Categoria", "CategoriaPai")
                        .WithMany("Subcategorias")
                        .HasForeignKey("IdCategoriaPai")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("Categorias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CategoriaPai");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Tag", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("Tags")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Transacao", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Cartao", "Cartao")
                        .WithMany("Transacoes")
                        .HasForeignKey("IdCartao")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DespesaSimples_API.Entities.Categoria", "Categoria")
                        .WithMany("Transacoes")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DespesaSimples_API.Entities.TransacaoFixa", "TransacaoFixa")
                        .WithMany("Transacoes")
                        .HasForeignKey("IdTransacaoFixa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("Transacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cartao");

                    b.Navigation("Categoria");

                    b.Navigation("TransacaoFixa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.TransacaoFixa", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Cartao", "Cartao")
                        .WithMany()
                        .HasForeignKey("IdCartao")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DespesaSimples_API.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DespesaSimples_API.Entities.User", "Usuario")
                        .WithMany("TransacoesFixa")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cartao");

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DespesaSimples_API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTransacao", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsIdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DespesaSimples_API.Entities.Transacao", null)
                        .WithMany()
                        .HasForeignKey("TransacoesIdTransacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTransacaoFixa", b =>
                {
                    b.HasOne("DespesaSimples_API.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsIdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DespesaSimples_API.Entities.TransacaoFixa", null)
                        .WithMany()
                        .HasForeignKey("TransacaoFixaIdTransacaoFixa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Cartao", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.Categoria", b =>
                {
                    b.Navigation("Cartoes");

                    b.Navigation("Subcategorias");

                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.TransacaoFixa", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("DespesaSimples_API.Entities.User", b =>
                {
                    b.Navigation("Balancos");

                    b.Navigation("Cartoes");

                    b.Navigation("Categorias");

                    b.Navigation("Tags");

                    b.Navigation("Transacoes");

                    b.Navigation("TransacoesFixa");
                });
#pragma warning restore 612, 618
        }
    }
}
